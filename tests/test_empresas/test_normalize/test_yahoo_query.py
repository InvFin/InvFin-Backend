from typing import Optional, Dict, Union
from django.test import TestCase

from src.empresas.models import (
    BalanceSheetYahooQuery,
    CashflowStatementYahooQuery,
    IncomeStatementYahooQuery,
)

from .mixin import NormalizeStatementMixin


class TestNormalizeStatementsYahooQuery(NormalizeStatementMixin, TestCase):
    income_statement: IncomeStatementYahooQuery
    balance_sheet: BalanceSheetYahooQuery
    cashflow_statement: CashflowStatementYahooQuery
    income_statement_model = IncomeStatementYahooQuery
    balance_sheet_model = BalanceSheetYahooQuery
    cashflow_statement_model = CashflowStatementYahooQuery

    def test_return_standard_income_statement(self):
        income_statement_dict: Dict[str, Optional[Union[int, float]]] = (
            self.income_statement.return_standard()
        )
        self.assertEqual(
            income_statement_dict["revenue"],
            self.income_statement.total_revenue,
        )
        self.assertEqual(
            income_statement_dict["cost_of_revenue"],
            self.income_statement.reconciled_cost_of_revenue,
        )
        self.assertEqual(
            income_statement_dict["gross_profit"],
            self.income_statement.gross_profit,
        )
        self.assertEqual(
            income_statement_dict["rd_expenses"],
            self.income_statement.research_and_development,
        )
        self.assertIsNone(income_statement_dict["general_administrative_expenses"])
        self.assertIsNone(income_statement_dict["selling_marketing_expenses"])
        self.assertEqual(
            income_statement_dict["sga_expenses"],
            self.income_statement.selling_general_and_administration,
        )
        self.assertEqual(
            income_statement_dict["other_expenses"],
            self.income_statement.other_income_expense,
        )
        self.assertEqual(
            income_statement_dict["operating_expenses"],
            self.income_statement.operating_expense,
        )
        self.assertEqual(
            income_statement_dict["cost_and_expenses"],
            self.income_statement.total_expenses,
        )
        self.assertEqual(
            income_statement_dict["interest_expense"],
            self.income_statement.interest_expense_non_operating,
        )
        self.assertEqual(
            income_statement_dict["depreciation_amortization"],
            self.income_statement.reconciled_depreciation,
        )
        self.assertEqual(
            income_statement_dict["ebitda"],
            self.income_statement.normalized_ebitda,
        )
        self.assertEqual(
            income_statement_dict["operating_income"],
            self.income_statement.total_operating_income_as_reported,
        )
        self.assertEqual(
            income_statement_dict["net_total_other_income_expenses"],
            self.income_statement.operating_expense,
        )
        self.assertEqual(
            income_statement_dict["income_before_tax"],
            self.income_statement.pretax_income,
        )
        self.assertEqual(
            income_statement_dict["income_tax_expenses"],
            self.income_statement.tax_provision,
        )
        self.assertEqual(
            income_statement_dict["net_income"],
            self.income_statement.normalized_income,
        )
        self.assertEqual(
            income_statement_dict["weighted_average_shares_outstanding"],
            self.income_statement.basic_average_shares,
        )
        self.assertEqual(
            income_statement_dict["weighted_average_diluated_shares_outstanding"],
            self.income_statement.diluted_average_shares,
        )

    def test_return_standard_balance_sheet(self):
        balance_sheet_dict: Dict[str, Optional[Union[int, float]]] = (
            self.balance_sheet.return_standard()
        )
        self.assertEqual(
            balance_sheet_dict["cash_and_cash_equivalents"],
            self.balance_sheet.cash_and_cash_equivalents,
        )
        self.assertEqual(
            balance_sheet_dict["short_term_investments"],
            self.balance_sheet.other_short_term_investments,
        )
        self.assertEqual(
            balance_sheet_dict["cash_and_short_term_investments"],
            self.balance_sheet.cash_cash_equivalents_and_short_term_investments,
        )
        self.assertEqual(
            balance_sheet_dict["net_receivables"],
            self.balance_sheet.receivables,
        )
        self.assertEqual(
            balance_sheet_dict["inventory"],
            self.balance_sheet.inventory,
        )
        self.assertEqual(
            balance_sheet_dict["other_current_assets"],
            self.balance_sheet.other_current_assets,
        )
        self.assertEqual(
            balance_sheet_dict["total_current_assets"],
            self.balance_sheet.current_assets,
        )
        self.assertEqual(
            balance_sheet_dict["property_plant_equipment"],
            self.balance_sheet.net_ppe,
        )
        self.assertIsNone(balance_sheet_dict["goodwill"])
        self.assertIsNone(balance_sheet_dict["intangible_assets"])
        self.assertIsNone(balance_sheet_dict["goodwill_and_intangible_assets"])
        self.assertEqual(
            balance_sheet_dict["long_term_investments"],
            self.balance_sheet.investments_and_advances,
        )
        self.assertIsNone(balance_sheet_dict["tax_assets"])
        self.assertEqual(
            balance_sheet_dict["other_non_current_assets"],
            self.balance_sheet.other_non_current_assets,
        )
        self.assertEqual(
            balance_sheet_dict["total_non_current_assets"],
            self.balance_sheet.total_non_current_assets,
        )
        self.assertIsNone(balance_sheet_dict["other_assets"])
        self.assertEqual(
            balance_sheet_dict["total_assets"],
            self.balance_sheet.total_assets,
        )
        self.assertEqual(
            balance_sheet_dict["accounts_payable"],
            self.balance_sheet.payables_and_accrued_expenses,
        )
        self.assertEqual(
            balance_sheet_dict["short_term_debt"],
            self.balance_sheet.current_debt_and_capital_lease_obligation,
        )
        self.assertIsNone(balance_sheet_dict["tax_payables"])
        self.assertEqual(
            balance_sheet_dict["deferred_revenue"],
            self.balance_sheet.current_deferred_revenue,
        )
        self.assertEqual(
            balance_sheet_dict["other_current_liabilities"],
            self.balance_sheet.other_current_liabilities,
        )
        self.assertEqual(
            balance_sheet_dict["total_current_liabilities"],
            self.balance_sheet.current_liabilities,
        )
        self.assertEqual(
            balance_sheet_dict["long_term_debt"],
            self.balance_sheet.long_term_debt_and_capital_lease_obligation,
        )
        self.assertIsNone(balance_sheet_dict["deferred_revenue_non_current"])
        self.assertIsNone(balance_sheet_dict["deferred_tax_liabilities_non_current"])
        self.assertEqual(
            balance_sheet_dict["other_non_current_liabilities"],
            self.balance_sheet.other_non_current_liabilities,
        )
        self.assertEqual(
            balance_sheet_dict["total_non_current_liabilities"],
            self.balance_sheet.total_non_current_liabilities_net_minority_interest,
        )
        self.assertIsNone(balance_sheet_dict["other_liabilities"])
        self.assertEqual(
            balance_sheet_dict["total_liabilities"],
            self.balance_sheet.total_liabilities_net_minority_interest,
        )
        self.assertEqual(
            balance_sheet_dict["common_stocks"],
            self.balance_sheet.common_stock,
        )
        self.assertEqual(
            balance_sheet_dict["retained_earnings"],
            self.balance_sheet.retained_earnings,
        )
        self.assertEqual(
            balance_sheet_dict["accumulated_other_comprehensive_income_loss"],
            self.balance_sheet.gains_losses_not_affecting_retained_earnings,
        )
        self.assertIsNone(balance_sheet_dict["othertotal_stockholders_equity"])
        self.assertEqual(
            balance_sheet_dict["total_stockholders_equity"],
            self.balance_sheet.total_equity_gross_minority_interest,
        )
        self.assertEqual(
            balance_sheet_dict["total_liabilities_and_total_equity"],
            self.balance_sheet.total_assets,
        )
        self.assertIsNone(balance_sheet_dict["total_investments"])
        self.assertEqual(
            balance_sheet_dict["total_debt"],
            self.balance_sheet.total_debt,
        )
        self.assertEqual(
            balance_sheet_dict["net_debt"],
            self.balance_sheet.net_debt,
        )

    def test_return_standard_cashflow_statement(self):
        cashflow_statement_dict: Dict[str, Optional[Union[int, float]]] = (
            self.cashflow_statement.return_standard()
        )
        self.assertEqual(
            cashflow_statement_dict["net_income"],
            self.cashflow_statement.net_income,
        )
        self.assertEqual(
            cashflow_statement_dict["depreciation_amortization"],
            self.cashflow_statement.depreciation_and_amortization,
        )
        self.assertEqual(
            cashflow_statement_dict["deferred_income_tax"],
            self.cashflow_statement.deferred_income_tax,
        )
        self.assertEqual(
            cashflow_statement_dict["stock_based_compensation"],
            self.cashflow_statement.stock_based_compensation,
        )
        self.assertEqual(
            cashflow_statement_dict["change_in_working_capital"],
            self.cashflow_statement.change_in_working_capital,
        )
        self.assertEqual(
            cashflow_statement_dict["accounts_receivable"],
            self.cashflow_statement.changes_in_account_receivables,
        )
        self.assertEqual(
            cashflow_statement_dict["inventory"],
            self.cashflow_statement.change_in_inventory,
        )
        self.assertIsNone(cashflow_statement_dict["accounts_payable"])
        self.assertEqual(
            cashflow_statement_dict["other_working_capital"],
            self.cashflow_statement.change_in_other_working_capital,
        )
        self.assertEqual(
            cashflow_statement_dict["other_non_cash_items"],
            self.cashflow_statement.other_non_cash_items,
        )
        self.assertEqual(
            cashflow_statement_dict["operating_activities_cf"],
            self.cashflow_statement.cash_flow_from_continuing_operating_activities,
        )
        self.assertIsNone(cashflow_statement_dict["investments_property_plant_equipment"])
        self.assertEqual(
            cashflow_statement_dict["acquisitions_net"],
            self.cashflow_statement.purchase_of_business,
        )
        self.assertEqual(
            cashflow_statement_dict["purchases_investments"],
            self.cashflow_statement.purchase_of_investment,
        )
        self.assertEqual(
            cashflow_statement_dict["sales_maturities_investments"],
            self.cashflow_statement.sale_of_investment,
        )
        self.assertEqual(
            cashflow_statement_dict["other_investing_activites"],
            self.cashflow_statement.net_other_investing_changes,
        )
        self.assertEqual(
            cashflow_statement_dict["investing_activities_cf"],
            self.cashflow_statement.cash_flow_from_continuing_investing_activities,
        )
        self.assertEqual(
            cashflow_statement_dict["debt_repayment"],
            self.cashflow_statement.repayment_of_debt,
        )
        self.assertEqual(
            cashflow_statement_dict["common_stock_issued"],
            self.cashflow_statement.issuance_of_capital_stock,
        )
        self.assertEqual(
            cashflow_statement_dict["common_stock_repurchased"],
            self.cashflow_statement.repurchase_of_capital_stock,
        )
        self.assertEqual(
            cashflow_statement_dict["dividends_paid"],
            self.cashflow_statement.common_stock_dividend_paid,
        )
        self.assertEqual(
            cashflow_statement_dict["other_financing_activities"],
            self.cashflow_statement.net_other_financing_charges,
        )
        self.assertEqual(
            cashflow_statement_dict["financing_activities_cf"],
            self.cashflow_statement.cash_flow_from_continuing_financing_activities,
        )
        self.assertIsNone(cashflow_statement_dict["effect_forex_exchange"])
        self.assertIsNone(cashflow_statement_dict["net_change_cash"])
        self.assertEqual(
            cashflow_statement_dict["cash_end_period"],
            self.cashflow_statement.end_cash_position,
        )
        self.assertEqual(
            cashflow_statement_dict["cash_beginning_period"],
            self.cashflow_statement.beginning_cash_position,
        )
        self.assertEqual(
            cashflow_statement_dict["operating_cf"],
            self.cashflow_statement.operating_cash_flow,
        )
        self.assertEqual(
            cashflow_statement_dict["capex"],
            self.cashflow_statement.capital_expenditure,
        )
        self.assertEqual(
            cashflow_statement_dict["fcf"],
            self.cashflow_statement.free_cash_flow,
        )
