from django.test import TestCase
from typing import Optional, Dict, Union
from src.empresas.models import (
    BalanceSheetYFinance,
    CashflowStatementYFinance,
    IncomeStatementYFinance,
)

from .mixin import NormalizeStatementMixin


class TestNormalizeStatementsYFinance(NormalizeStatementMixin, TestCase):
    income_statement: IncomeStatementYFinance
    balance_sheet: BalanceSheetYFinance
    cashflow_statement: CashflowStatementYFinance
    income_statement_model = IncomeStatementYFinance
    balance_sheet_model = BalanceSheetYFinance
    cashflow_statement_model = CashflowStatementYFinance

    def test_return_standard_income_statement(self):
        income_statement_dict: Dict[str, Optional[Union[int, float]]] = (
            self.income_statement.return_standard()
        )
        self.assertEqual(
            income_statement_dict["revenue"],
            self.income_statement.total_revenue,
        )
        self.assertEqual(
            income_statement_dict["cost_of_revenue"],
            self.income_statement.cost_of_revenue,
        )
        self.assertEqual(
            income_statement_dict["gross_profit"],
            self.income_statement.gross_profit,
        )
        self.assertEqual(
            income_statement_dict["rd_expenses"],
            self.income_statement.research_development,
        )
        self.assertEqual(
            income_statement_dict["general_administrative_expenses"],
            None,
        )
        self.assertEqual(
            income_statement_dict["selling_marketing_expenses"],
            None,
        )
        self.assertEqual(
            income_statement_dict["sga_expenses"],
            self.income_statement.selling_general_administrative,
        )
        self.assertEqual(
            income_statement_dict["other_expenses"],
            None,
        )
        self.assertEqual(
            income_statement_dict["operating_expenses"],
            None,
        )
        self.assertEqual(
            income_statement_dict["cost_and_expenses"],
            self.income_statement.total_operating_expenses,
        )
        self.assertEqual(
            income_statement_dict["interest_expense"],
            None,
        )
        self.assertEqual(
            income_statement_dict["depreciation_amortization"],
            None,
        )
        self.assertEqual(
            income_statement_dict["ebitda"],
            None,
        )
        self.assertEqual(
            income_statement_dict["operating_income"],
            self.income_statement.operating_income,
        )
        self.assertEqual(
            income_statement_dict["net_total_other_income_expenses"],
            None,
        )
        self.assertEqual(
            income_statement_dict["income_before_tax"],
            self.income_statement.income_before_tax,
        )
        self.assertEqual(
            income_statement_dict["income_tax_expenses"],
            self.income_statement.income_tax_expense,
        )
        self.assertEqual(
            income_statement_dict["net_income"],
            self.income_statement.net_income_applicable_to_common_shares,
        )
        self.assertEqual(
            income_statement_dict["weighted_average_shares_outstanding"],
            None,
        )
        self.assertEqual(
            income_statement_dict["weighted_average_diluated_shares_outstanding"],
            None,
        )

    def test_return_standard_balance_sheet(self):
        balance_sheet_dict: Dict[str, Optional[Union[int, float]]] = (
            self.balance_sheet.return_standard()
        )
        self.assertEqual(
            balance_sheet_dict["cash_and_cash_equivalents"],
            self.balance_sheet.cash,
        )
        self.assertEqual(
            balance_sheet_dict["short_term_investments"],
            self.balance_sheet.short_term_investments,
        )
        self.assertEqual(
            balance_sheet_dict["cash_and_short_term_investments"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["net_receivables"],
            self.balance_sheet.net_receivables,
        )
        self.assertEqual(
            balance_sheet_dict["inventory"],
            self.balance_sheet.inventory,
        )
        self.assertEqual(
            balance_sheet_dict["other_current_assets"],
            self.balance_sheet.other_current_assets,
        )
        self.assertEqual(
            balance_sheet_dict["total_current_assets"],
            self.balance_sheet.total_current_assets,
        )
        self.assertEqual(
            balance_sheet_dict["property_plant_equipment"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["goodwill"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["intangible_assets"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["goodwill_and_intangible_assets"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["long_term_investments"],
            self.balance_sheet.long_term_investments,
        )
        self.assertEqual(
            balance_sheet_dict["tax_assets"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["other_non_current_assets"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_non_current_assets"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["other_assets"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_assets"],
            self.balance_sheet.total_assets,
        )
        self.assertEqual(
            balance_sheet_dict["accounts_payable"],
            self.balance_sheet.accounts_payable,
        )
        self.assertEqual(
            balance_sheet_dict["short_term_debt"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["tax_payables"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["deferred_revenue"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["other_current_liabilities"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_current_liabilities"],
            self.balance_sheet.total_current_liabilities,
        )
        self.assertEqual(
            balance_sheet_dict["long_term_debt"],
            self.balance_sheet.long_term_debt,
        )
        self.assertEqual(
            balance_sheet_dict["deferred_revenue_non_current"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["deferred_tax_liabilities_non_current"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["other_non_current_liabilities"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_non_current_liabilities"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["other_liabilities"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_liabilities"],
            self.balance_sheet.total_liab,
        )
        self.assertEqual(
            balance_sheet_dict["common_stocks"],
            self.balance_sheet.common_stock,
        )
        self.assertEqual(
            balance_sheet_dict["retained_earnings"],
            self.balance_sheet.retained_earnings,
        )
        self.assertEqual(
            balance_sheet_dict["accumulated_other_comprehensive_income_loss"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["othertotal_stockholders_equity"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_stockholders_equity"],
            self.balance_sheet.total_stockholder_equity,
        )
        self.assertEqual(
            balance_sheet_dict["total_liabilities_and_total_equity"],
            self.balance_sheet.total_assets,
        )
        self.assertEqual(
            balance_sheet_dict["total_investments"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["total_debt"],
            None,
        )
        self.assertEqual(
            balance_sheet_dict["net_debt"],
            None,
        )

    def test_return_standard_cashflow_statement(self):
        cashflow_statement_dict: Dict[str, Optional[Union[int, float]]] = (
            self.cashflow_statement.return_standard()
        )
        self.assertEqual(
            cashflow_statement_dict["net_income"],
            self.cashflow_statement.net_income,
        )
        self.assertEqual(
            cashflow_statement_dict["depreciation_amortization"],
            self.cashflow_statement.depreciation,
        )
        self.assertEqual(
            cashflow_statement_dict["deferred_income_tax"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["stock_based_compensation"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["change_in_working_capital"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["accounts_receivable"],
            self.cashflow_statement.change_to_account_receivables,
        )
        self.assertEqual(
            cashflow_statement_dict["inventory"],
            self.cashflow_statement.change_to_inventory,
        )
        self.assertEqual(
            cashflow_statement_dict["accounts_payable"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["other_working_capital"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["other_non_cash_items"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["operating_activities_cf"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["investments_property_plant_equipment"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["acquisitions_net"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["purchases_investments"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["sales_maturities_investments"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["other_investing_activites"],
            self.cashflow_statement.other_cashflows_from_investing_activities,
        )
        self.assertEqual(
            cashflow_statement_dict["investing_activities_cf"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["debt_repayment"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["common_stock_issued"],
            self.cashflow_statement.issuance_of_stock,
        )
        self.assertEqual(
            cashflow_statement_dict["common_stock_repurchased"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["dividends_paid"],
            self.cashflow_statement.dividends_paid,
        )
        self.assertEqual(
            cashflow_statement_dict["other_financing_activities"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["financing_activities_cf"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["effect_forex_exchange"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["net_change_cash"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["cash_end_period"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["cash_beginning_period"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["operating_cf"],
            None,
        )
        self.assertEqual(
            cashflow_statement_dict["capex"],
            self.cashflow_statement.capital_expenditures,
        )
        self.assertEqual(
            cashflow_statement_dict["fcf"],
            None,
        )
