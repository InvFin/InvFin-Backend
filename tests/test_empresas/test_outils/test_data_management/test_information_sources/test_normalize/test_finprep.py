from django.test import TestCase
from typing import Optional, Dict, Union
from src.empresas.models import (
    BalanceSheetFinprep,
    CashflowStatementFinprep,
    IncomeStatementFinprep,
)

from .mixin import NormalizeStatementMixin


class TestNormalizeStatementsFinprep(NormalizeStatementMixin, TestCase):
    income_statement: IncomeStatementFinprep
    balance_sheet: BalanceSheetFinprep
    cashflow_statement: CashflowStatementFinprep
    income_statement_model = IncomeStatementFinprep
    balance_sheet_model = BalanceSheetFinprep
    cashflow_statement_model = CashflowStatementFinprep

    def test_return_standard_income_statement(self):
        income_statement_dict: Dict[
            str, Optional[Union[int, float]]
        ] = self.income_statement.return_standard()
        self.assertEqual(
            self.income_statement.revenue,
            income_statement_dict["revenue"],
        )
        self.assertEqual(
            self.income_statement.cost_of_revenue,
            income_statement_dict["cost_of_revenue"],
        )
        self.assertEqual(
            self.income_statement.gross_profit,
            income_statement_dict["gross_profit"],
        )
        self.assertEqual(
            self.income_statement.research_and_development_expenses,
            income_statement_dict["rd_expenses"],
        )
        self.assertEqual(
            self.income_statement.general_and_administrative_expenses,
            income_statement_dict["general_administrative_expenses"],
        )
        self.assertEqual(
            self.income_statement.selling_and_marketing_expenses,
            income_statement_dict["selling_marketing_expenses"],
        )
        self.assertEqual(
            self.income_statement.selling_general_and_administrative_expenses,
            income_statement_dict["sga_expenses"],
        )
        self.assertEqual(
            self.income_statement.other_expenses,
            income_statement_dict["other_expenses"],
        )
        self.assertEqual(
            self.income_statement.operating_expenses,
            income_statement_dict["operating_expenses"],
        )
        self.assertEqual(
            self.income_statement.cost_and_expenses,
            income_statement_dict["cost_and_expenses"],
        )
        self.assertEqual(
            self.income_statement.interest_expense,
            income_statement_dict["interest_expense"],
        )
        self.assertEqual(
            self.income_statement.depreciation_and_amortization,
            income_statement_dict["depreciation_amortization"],
        )
        self.assertEqual(
            self.income_statement.ebitda,
            income_statement_dict["ebitda"],
        )
        self.assertEqual(
            self.income_statement.operating_income,
            income_statement_dict["operating_income"],
        )
        self.assertEqual(
            self.income_statement.total_other_income_expenses_net,
            income_statement_dict["net_total_other_income_expenses"],
        )
        self.assertEqual(
            self.income_statement.income_before_tax,
            income_statement_dict["income_before_tax"],
        )
        self.assertEqual(
            self.income_statement.income_tax_expense,
            income_statement_dict["income_tax_expenses"],
        )
        self.assertEqual(
            self.income_statement.net_income,
            income_statement_dict["net_income"],
        )
        self.assertEqual(
            self.income_statement.weighted_average_shs_out,
            income_statement_dict["weighted_average_shares_outstanding"],
        )
        self.assertEqual(
            self.income_statement.weighted_average_shs_out_dil,
            income_statement_dict["weighted_average_diluated_shares_outstanding"],
        )

    def test_return_standard_balance_sheet(self):
        balance_sheet_dict: Dict[
            str, Optional[Union[int, float]]
        ] = self.balance_sheet.return_standard()
        self.assertEqual(
            self.balance_sheet.cash_and_cash_equivalents,
            balance_sheet_dict["cash_and_cash_equivalents"],
        )
        self.assertEqual(
            self.balance_sheet.short_term_investments,
            balance_sheet_dict["short_term_investments"],
        )
        self.assertEqual(
            self.balance_sheet.cash_and_short_term_investments,
            balance_sheet_dict["cash_and_short_term_investments"],
        )
        self.assertEqual(
            self.balance_sheet.net_receivables,
            balance_sheet_dict["net_receivables"],
        )
        self.assertEqual(
            self.balance_sheet.inventory,
            balance_sheet_dict["inventory"],
        )
        self.assertEqual(
            self.balance_sheet.other_current_assets,
            balance_sheet_dict["other_current_assets"],
        )
        self.assertEqual(
            self.balance_sheet.total_current_assets,
            balance_sheet_dict["total_current_assets"],
        )
        self.assertEqual(
            self.balance_sheet.property_plant_equipment_net,
            balance_sheet_dict["property_plant_equipment"],
        )
        self.assertEqual(
            self.balance_sheet.goodwill,
            balance_sheet_dict["goodwill"],
        )
        self.assertEqual(
            self.balance_sheet.intangible_assets,
            balance_sheet_dict["intangible_assets"],
        )
        self.assertEqual(
            self.balance_sheet.goodwill_and_intangible_assets,
            balance_sheet_dict["goodwill_and_intangible_assets"],
        )
        self.assertEqual(
            self.balance_sheet.long_term_investments,
            balance_sheet_dict["long_term_investments"],
        )
        self.assertEqual(
            self.balance_sheet.tax_assets,
            balance_sheet_dict["tax_assets"],
        )
        self.assertEqual(
            self.balance_sheet.other_non_current_assets,
            balance_sheet_dict["other_non_current_assets"],
        )
        self.assertEqual(
            self.balance_sheet.total_non_current_assets,
            balance_sheet_dict["total_non_current_assets"],
        )
        self.assertEqual(
            self.balance_sheet.other_assets,
            balance_sheet_dict["other_assets"],
        )
        self.assertEqual(
            self.balance_sheet.total_assets,
            balance_sheet_dict["total_assets"],
        )
        self.assertEqual(
            self.balance_sheet.account_payables,
            balance_sheet_dict["accounts_payable"],
        )
        self.assertEqual(
            self.balance_sheet.short_term_debt,
            balance_sheet_dict["short_term_debt"],
        )
        self.assertEqual(
            self.balance_sheet.tax_payables,
            balance_sheet_dict["tax_payables"],
        )
        self.assertEqual(
            self.balance_sheet.deferred_revenue,
            balance_sheet_dict["deferred_revenue"],
        )
        self.assertEqual(
            self.balance_sheet.other_current_liabilities,
            balance_sheet_dict["other_current_liabilities"],
        )
        self.assertEqual(
            self.balance_sheet.total_current_liabilities,
            balance_sheet_dict["total_current_liabilities"],
        )
        self.assertEqual(
            self.balance_sheet.long_term_debt,
            balance_sheet_dict["long_term_debt"],
        )
        self.assertEqual(
            self.balance_sheet.deferred_revenue_non_current,
            balance_sheet_dict["deferred_revenue_non_current"],
        )
        self.assertEqual(
            self.balance_sheet.deferred_tax_liabilities_non_current,
            balance_sheet_dict["deferred_tax_liabilities_non_current"],
        )
        self.assertEqual(
            self.balance_sheet.other_non_current_liabilities,
            balance_sheet_dict["other_non_current_liabilities"],
        )
        self.assertEqual(
            self.balance_sheet.total_non_current_liabilities,
            balance_sheet_dict["total_non_current_liabilities"],
        )
        self.assertEqual(
            self.balance_sheet.other_liabilities,
            balance_sheet_dict["other_liabilities"],
        )
        self.assertEqual(
            self.balance_sheet.total_liabilities,
            balance_sheet_dict["total_liabilities"],
        )
        self.assertEqual(
            self.balance_sheet.common_stock,
            balance_sheet_dict["common_stocks"],
        )
        self.assertEqual(
            self.balance_sheet.retained_earnings,
            balance_sheet_dict["retained_earnings"],
        )
        self.assertEqual(
            self.balance_sheet.accumulated_other_comprehensive_income_loss,
            balance_sheet_dict["accumulated_other_comprehensive_income_loss"],
        )
        self.assertEqual(
            self.balance_sheet.othertotal_stockholders_equity,
            balance_sheet_dict["othertotal_stockholders_equity"],
        )
        self.assertEqual(
            self.balance_sheet.total_stockholders_equity,
            balance_sheet_dict["total_stockholders_equity"],
        )
        self.assertEqual(
            self.balance_sheet.total_liabilities_and_total_equity,
            balance_sheet_dict["total_liabilities_and_total_equity"],
        )
        self.assertEqual(
            self.balance_sheet.total_investments,
            balance_sheet_dict["total_investments"],
        )
        self.assertEqual(
            self.balance_sheet.total_debt,
            balance_sheet_dict["total_debt"],
        )
        self.assertEqual(
            self.balance_sheet.net_debt,
            balance_sheet_dict["net_debt"],
        )

    def test_return_standard_cashflow_statement(self):
        cashflow_statement_dict: Dict[
            str, Optional[Union[int, float]]
        ] = self.cashflow_statement.return_standard()
        self.assertEqual(
            self.cashflow_statement.net_income,
            cashflow_statement_dict["net_income"],
        )
        self.assertEqual(
            self.cashflow_statement.depreciation_and_amortization,
            cashflow_statement_dict["depreciation_amortization"],
        )
        self.assertEqual(
            self.cashflow_statement.deferred_income_tax,
            cashflow_statement_dict["deferred_income_tax"],
        )
        self.assertEqual(
            self.cashflow_statement.stock_based_compensation,
            cashflow_statement_dict["stock_based_compensation"],
        )
        self.assertEqual(
            self.cashflow_statement.change_in_working_capital,
            cashflow_statement_dict["change_in_working_capital"],
        )
        self.assertEqual(
            self.cashflow_statement.accounts_receivables,
            cashflow_statement_dict["accounts_receivable"],
        )
        self.assertEqual(
            self.cashflow_statement.inventory,
            cashflow_statement_dict["inventory"],
        )
        self.assertEqual(
            self.cashflow_statement.accounts_payables,
            cashflow_statement_dict["accounts_payable"],
        )
        self.assertEqual(
            self.cashflow_statement.other_working_capital,
            cashflow_statement_dict["other_working_capital"],
        )
        self.assertEqual(
            self.cashflow_statement.other_non_cash_items,
            cashflow_statement_dict["other_non_cash_items"],
        )
        self.assertEqual(
            self.cashflow_statement.net_cash_provided_by_operating_activities,
            cashflow_statement_dict["operating_activities_cf"],
        )
        self.assertEqual(
            self.cashflow_statement.investments_in_property_plant_and_equipment,
            cashflow_statement_dict["investments_property_plant_equipment"],
        )
        self.assertEqual(
            self.cashflow_statement.acquisitions_net,
            cashflow_statement_dict["acquisitions_net"],
        )
        self.assertEqual(
            self.cashflow_statement.purchases_of_investments,
            cashflow_statement_dict["purchases_investments"],
        )
        self.assertEqual(
            self.cashflow_statement.sales_maturities_of_investments,
            cashflow_statement_dict["sales_maturities_investments"],
        )
        self.assertEqual(
            self.cashflow_statement.other_investing_activites,
            cashflow_statement_dict["other_investing_activites"],
        )
        self.assertEqual(
            self.cashflow_statement.net_cash_used_for_investing_activites,
            cashflow_statement_dict["investing_activities_cf"],
        )
        self.assertEqual(
            self.cashflow_statement.debt_repayment,
            cashflow_statement_dict["debt_repayment"],
        )
        self.assertEqual(
            self.cashflow_statement.common_stock_issued,
            cashflow_statement_dict["common_stock_issued"],
        )
        self.assertEqual(
            self.cashflow_statement.common_stock_repurchased,
            cashflow_statement_dict["common_stock_repurchased"],
        )
        self.assertEqual(
            self.cashflow_statement.dividends_paid,
            cashflow_statement_dict["dividends_paid"],
        )
        self.assertEqual(
            self.cashflow_statement.other_financing_activites,
            cashflow_statement_dict["other_financing_activities"],
        )
        self.assertEqual(
            self.cashflow_statement.net_cash_used_provided_by_financing_activities,
            cashflow_statement_dict["financing_activities_cf"],
        )
        self.assertEqual(
            self.cashflow_statement.effect_of_forex_changes_on_cash,
            cashflow_statement_dict["effect_forex_exchange"],
        )
        self.assertEqual(
            self.cashflow_statement.net_change_in_cash,
            cashflow_statement_dict["net_change_cash"],
        )
        self.assertEqual(
            self.cashflow_statement.cash_at_end_of_period,
            cashflow_statement_dict["cash_end_period"],
        )
        self.assertEqual(
            self.cashflow_statement.cash_at_beginning_of_period,
            cashflow_statement_dict["cash_beginning_period"],
        )
        self.assertEqual(
            self.cashflow_statement.operating_cash_flow,
            cashflow_statement_dict["operating_cf"],
        )
        self.assertEqual(
            self.cashflow_statement.capital_expenditure,
            cashflow_statement_dict["capex"],
        )
        self.assertEqual(
            self.cashflow_statement.free_cash_flow,
            cashflow_statement_dict["fcf"],
        )
