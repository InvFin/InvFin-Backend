# Generated by Django 3.2.15 on 2022-11-04 22:43

import src.general.mixins
import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("classifications", "0001_initial"),
        ("empresas", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CompanyInformationBought",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Acción comprada",
                "verbose_name_plural": "Acciones compradas",
                "db_table": "favorites_stocks_boughts",
            },
        ),
        migrations.CreateModel(
            name="FavoritesEtfsHistorial",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("added", models.BooleanField(default=False)),
                ("removed", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "ETF favorito",
                "verbose_name_plural": "ETF favoritos",
                "db_table": "favorites_etfs_historial",
            },
            bases=(models.Model, src.general.mixins.BaseToAllMixin),
        ),
        migrations.CreateModel(
            name="FavoritesEtfsList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
            options={
                "verbose_name": "Lista de ETF favoritas",
                "verbose_name_plural": "Lista de ETF favoritas",
                "db_table": "favorites_etfs_list",
            },
        ),
        migrations.CreateModel(
            name="FavoritesStocksHistorial",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("added", models.BooleanField(default=False)),
                ("removed", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Acción favorita",
                "verbose_name_plural": "Acción favoritas",
                "db_table": "favorites_stocks_historial",
            },
            bases=(models.Model, src.general.mixins.BaseToAllMixin),
        ),
        migrations.CreateModel(
            name="FavoritesStocksList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
            options={
                "verbose_name": "Lista de acciones favoritas",
                "verbose_name_plural": "Lista de acciones favoritas",
                "db_table": "favorites_stocks_list",
            },
        ),
        migrations.CreateModel(
            name="UserCompanyObservation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("observation", ckeditor.fields.RichTextField(default="")),
                (
                    "observation_type",
                    models.IntegerField(
                        choices=[(1, "Fuerza"), (2, "Oportunidad"), (3, "Debilidad"), (4, "Amenaza")], default=0
                    ),
                ),
            ],
            options={
                "verbose_name": "Observaciones sobre la empresa",
                "db_table": "users_screener_companies_observations",
            },
        ),
        migrations.CreateModel(
            name="UserScreenerMediumPrediction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("optimistic_growth", models.FloatField(blank=True, null=True)),
                ("neutral_growth", models.FloatField(blank=True, null=True)),
                ("pesimistic_growth", models.FloatField(blank=True, null=True)),
                ("optimistic_margin", models.FloatField(blank=True, null=True)),
                ("neutral_margin", models.FloatField(blank=True, null=True)),
                ("pesimistic_margin", models.FloatField(blank=True, null=True)),
                ("optimistic_buyback", models.FloatField(blank=True, null=True)),
                ("neutral_buyback", models.FloatField(blank=True, null=True)),
                ("pesimistic_buyback", models.FloatField(blank=True, null=True)),
                ("optimistic_fcf_margin", models.FloatField(blank=True, null=True)),
                ("neutral_fcf_margin", models.FloatField(blank=True, null=True)),
                ("pesimistic_fcf_margin", models.FloatField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Predicciones elaboradas de los usuarios",
                "db_table": "users_screener_medium_predictions",
            },
        ),
        migrations.CreateModel(
            name="YahooScreener",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=500)),
                ("slug", models.SlugField(max_length=500)),
                ("description", models.TextField()),
                ("json_info", models.JSONField(default=dict)),
                ("yq_name", models.CharField(max_length=500)),
                (
                    "asset_class_related",
                    models.CharField(
                        choices=[
                            ("etf", "ETF"),
                            ("stock", "Stock"),
                            ("crypto", "Crypto"),
                            ("mutual_fund", "Mutual Fund"),
                            ("reit", "REIT"),
                        ],
                        max_length=25,
                    ),
                ),
                ("show", models.BooleanField(default=True)),
                ("categories", models.ManyToManyField(blank=True, to="classifications.Category")),
                ("tags", models.ManyToManyField(blank=True, to="classifications.Tag")),
            ],
            options={
                "verbose_name": "Yahoo screener",
                "db_table": "screener_yahoo_screeners",
            },
        ),
        migrations.CreateModel(
            name="UserScreenerSimplePrediction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("optimistic_growth", models.FloatField(blank=True, null=True)),
                ("neutral_growth", models.FloatField(blank=True, null=True)),
                ("pesimistic_growth", models.FloatField(blank=True, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="empresas.company"
                    ),
                ),
            ],
            options={
                "verbose_name": "Predicciones de los usuarios",
                "verbose_name_plural": "Predicciones de los usuarios",
                "db_table": "users_screener_simple_predictions",
            },
        ),
    ]
